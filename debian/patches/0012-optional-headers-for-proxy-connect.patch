--- a/nc.1
+++ b/nc.1
@@ -37,6 +37,7 @@
 .Op Fl 46bCDdhklnrStUuvZz
 .Op Fl I Ar length
 .Op Fl i Ar interval
+.Op Fl H Ar header Ns : Ns Ar value
 .Op Fl O Ar length
 .Op Fl P Ar proxy_username
 .Op Fl p Ar source_port
@@ -107,6 +108,15 @@
 Enable debugging on the socket.
 .It Fl d
 Do not attempt to read from stdin.
+.It Fl H Ar header Ns : Ns Ar value
+Adds
+.Dq Ar header Ns : Ar value Ns \er\en
+to the HTTP request when talking to a CONNECT proxy.
+.Fl H
+may be used multiple times to add more than one header.
+This option is particularly useful to add a
+.Dq User-Agent
+header because some proxies insist on it.
 .It Fl h
 Prints out
 .Nm
--- a/netcat.c
+++ b/netcat.c
@@ -155,7 +155,7 @@
 int	remote_connect(const char *, const char *, struct addrinfo);
 int	timeout_connect(int, const struct sockaddr *, socklen_t);
 int	socks_connect(const char *, const char *, struct addrinfo,
-	    const char *, const char *, struct addrinfo, int, const char *);
+	    const char *, const char *, struct addrinfo, int, const char *, char*);
 int	udptest(int);
 int	unix_bind(char *);
 int	unix_connect(char *);
@@ -173,6 +173,7 @@
 main(int argc, char *argv[])
 {
 	int ch, s, ret, socksv;
+	char *cptr;
 	char *host, **uport;
 	struct addrinfo hints;
 	struct servent *sv;
@@ -183,6 +184,7 @@
 	} cliaddr;
 	char *proxy = NULL;
 	const char *errstr, *proxyhost = "", *proxyport = NULL;
+	char* headers = NULL;
 	struct addrinfo proxyhints;
 	char unix_dg_tmp_socket_buf[UNIX_DG_TMP_SOCKET_SIZE];
 
@@ -194,7 +196,7 @@
 	sv = NULL;
 
 	while ((ch = getopt(argc, argv,
-	    "46bCDdhI:i:jklnO:P:p:q:rSs:tT:UuV:vw:X:x:Zz")) != -1) {
+	    "46bCDdhH:I:i:jklnO:P:p:q:rSs:tT:UuV:vw:X:x:Zz")) != -1) {
 		switch (ch) {
 		case '4':
 			family = AF_INET;
@@ -222,6 +224,24 @@
 			else
 				errx(1, "unsupported proxy protocol");
 			break;
+		case 'H':
+			cptr = index(optarg, ':');
+			if (cptr == NULL)
+				errx(1, "missing ':' in -H argument: %s", optarg);
+
+			if (headers == NULL)
+				headers = malloc(strlen(optarg) + 1 + 2 + 1); /* space, \r\n, \0 */
+			else
+				headers = realloc(headers, strlen(headers) + strlen(optarg) + 1 + 2 + 1);
+
+			if (headers == NULL)
+				err(1, NULL);
+
+			strncat(headers, optarg, cptr-optarg);
+			strcat(headers, ": ");
+			strcat(headers, cptr+1);
+			strcat(headers, "\r\n");
+			break;
 		case 'd':
 			dflag = 1;
 			break;
@@ -598,7 +618,7 @@
 			if (xflag)
 				s = socks_connect(host, portlist[i], hints,
 				    proxyhost, proxyport, proxyhints, socksv,
-				    Pflag);
+				    Pflag, headers);
 			else
 				s = remote_connect(host, portlist[i], hints);
 
@@ -1340,6 +1360,7 @@
 	\t-D		Enable the debug socket option\n\
 	\t-d		Detach from stdin\n\
 	\t-h		This help text\n\
+	\t-H header:value\tAdd HTTP header when CONNECTing to proxy\n\
 	\t-I length	TCP receive buffer length\n\
 	\t-i secs\t	Delay interval for lines sent, ports scanned\n\
 	\t-j		Use jumbo frame\n\
@@ -1372,10 +1393,10 @@
 usage(int ret)
 {
 	fprintf(stderr,
-	    "usage: nc [-46bCDdhjklnrStUuvZz] [-I length] [-i interval] [-O length]\n"
-	    "\t  [-P proxy_username] [-p source_port] [-q seconds] [-s source]\n"
-	    "\t  [-T toskeyword] [-V rtable] [-w timeout] [-X proxy_protocol]\n"
-	    "\t  [-x proxy_address[:port]] [destination] [port]\n");
+	    "usage: nc [-46bCDdhjklnrStUuvZz] [-I length] [-i interval] [-H header:value]\n"
+	    "\t  [-O length] [-P proxy_username] [-p source_port] [-q seconds]\n"
+	    "\t  [-s source] [-T toskeyword] [-V rtable] [-w timeout]\n"
+	    "\t  [-X proxy_protocol] [-x proxy_address[:port]] [destination] [port]\n");
 	if (ret)
 		exit(1);
 }
--- a/socks.c
+++ b/socks.c
@@ -56,7 +56,7 @@
 int	remote_connect(const char *, const char *, struct addrinfo);
 int	socks_connect(const char *, const char *, struct addrinfo,
 	    const char *, const char *, struct addrinfo, int,
-	    const char *);
+	    const char *, char*);
 
 static int
 decode_addrport(const char *h, const char *p, struct sockaddr *addr,
@@ -126,7 +126,7 @@
 socks_connect(const char *host, const char *port,
     struct addrinfo hints __attribute__ ((__unused__)),
     const char *proxyhost, const char *proxyport, struct addrinfo proxyhints,
-    int socksv, const char *proxyuser)
+    int socksv, const char *proxyuser, char* headers)
 {
 	int proxyfd, r, authretry = 0;
 	size_t hlen, wlen;
@@ -307,6 +307,13 @@
 				err(1, "write failed (%zu/%d)", (size_t)cnt, r);
 		}
 
+		/* Send additional -H headers, if any */
+		if (headers != NULL) {
+		        r = strlen(headers);
+			if ((cnt = atomicio(vwrite, proxyfd, (void*)headers, r)) != r)
+				err(1, "write failed (%zu/%d)", (size_t)cnt, r);
+                }
+
 		/* Terminate headers */
 		if ((r = atomicio(vwrite, proxyfd, "\r\n", 2)) != 2)
 			err(1, "write failed (2/%d)", r);
