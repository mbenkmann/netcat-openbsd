--- a/netcat.c
+++ b/netcat.c
@@ -109,6 +109,9 @@
 #define PORT_MAX	65535
 #define PORT_MAX_LEN	6
 #define UNIX_DG_TMP_SOCKET_SIZE	19
+#define PROXY_CHAIN_MAX 32
+#define SOCKS_PORT	"1080"
+#define HTTP_PROXY_PORT	"3128"
 
 #define CONNECTION_SUCCESS 0
 #define CONNECTION_FAILED 1
@@ -159,9 +162,8 @@
 void	help(void);
 int	local_listen(char *, char *, struct addrinfo);
 void	readwrite(int);
-int	remote_connect(const char *, const char *, struct addrinfo);
-int	socks_connect(const char *, const char *, struct addrinfo,
-	    const char *, const char *, struct addrinfo, int, const char *, char*);
+int	recursive_connect(const char *, const char *, struct addrinfo,
+	    const char *[], const char *[], struct addrinfo, int, const char *, char*);
 int	proxy_read_connection_request(int request_sock, char **host, char **port);
 void	proxy_send_error_reply(int request_sock, int proxy_proto);
 void	proxy_send_success_reply(int request_sock, int proxy_proto, int peer_sock);
@@ -178,7 +180,7 @@
 static int connect_with_timeout(int fd, const struct sockaddr *sa,
         socklen_t salen, int ctimeout);
 static void connect_stdin_stdout_to(int request_sock, const char *endpoint2host, const char *endpoint2port,
-	struct addrinfo hints, const char *proxyhost, const char *proxyport,
+	struct addrinfo hints, const char *proxyhost[], const char *proxyport[],
 	struct addrinfo proxyhints, int socksv, const char *proxyuser, char *headers);
 static void shutdown_endpoint2(const char *endpoint2host);
 static void quit();
@@ -231,7 +233,9 @@
 		struct sockaddr_un forunix;
 	} cliaddr;
 	char *proxy = NULL;
-	const char *errstr, *proxyhost = "", *proxyport = NULL;
+	const char *errstr;
+	const char *proxyhost[PROXY_CHAIN_MAX+1] = {NULL};
+	const char *proxyport[PROXY_CHAIN_MAX+1] = {NULL};
 	char *endpoint2 = NULL;
 	char *endpoint2host = NULL, *endpoint2port = NULL;
 	char* headers = NULL;
@@ -507,6 +511,48 @@
 	}
 
 	if (xflag) {
+		int i;
+		int proxycount;
+		char* proxypart;
+		char* phost;
+		char* pport;
+
+		for(i = 0; i < PROXY_CHAIN_MAX ; ++i) {
+			proxypart = strsep(&proxy, "+");
+			if (proxypart == NULL) {
+				proxyhost[i] = NULL;
+				proxyport[i] = NULL;
+				break;
+			}
+
+			phost = strsep(&proxypart, ":");
+			if (proxypart == NULL || *proxypart == 0)
+				pport = (socksv == -1) ? HTTP_PROXY_PORT : SOCKS_PORT;
+			else
+				pport = proxypart;
+
+			if (*phost == 0)
+				errx(1, "missing proxy host name");
+			proxyhost[i] = phost;
+			proxyport[i] = pport;
+		}
+
+		proxycount = i;
+		if (proxycount >= PROXY_CHAIN_MAX)
+			errx(1, "proxy chain too long");
+
+		proxy = (char*)proxyhost[0]; /* restore original pointer in case someone wants to free() it. */
+
+		/* Reverse proxy chain so that exit proxy is element 0 */
+		for (i = 0; i < (proxycount >> 1); ++i) {
+			const char* tmp = proxyhost[i];
+			proxyhost[i] = proxyhost[proxycount - i - 1];
+			proxyhost[proxycount - i - 1] = tmp;
+			tmp = proxyport[i];
+			proxyport[i] = proxyport[proxycount - i - 1];
+			proxyport[proxycount - i - 1] = tmp;
+		}
+
 		if (uflag)
 			errx(1, "no proxy support for UDP mode");
 # if defined(IPPROTO_DCCP) && defined(SOCK_DCCP)
@@ -526,8 +572,6 @@
 		if (sflag)
 			errx(1, "no proxy support for local source address");
 
-		proxyhost = strsep(&proxy, ":");
-		proxyport = proxy;
 
 		memset(&proxyhints, 0, sizeof(struct addrinfo));
 		proxyhints.ai_family = family;
@@ -725,12 +769,9 @@
 				continue;
 			}
 			
-			if (xflag)
-				s = socks_connect(host, portlist[i], hints,
-				    proxyhost, proxyport, proxyhints, socksv,
-				    Pflag, headers);
-			else
-				s = remote_connect(host, portlist[i], hints);
+			s = recursive_connect(host, portlist[i], hints,
+			    proxyhost, proxyport, proxyhints, socksv,
+			    Pflag, headers);
 
 			if (s < 0)
 				continue;
@@ -1048,7 +1089,7 @@
 }
 
 static void connect_stdin_stdout_to(int request_sock, const char *endpoint2host, const char *endpoint2port,
-	struct addrinfo hints, const char *proxyhost, const char *proxyport,
+	struct addrinfo hints, const char *proxyhost[], const char *proxyport[],
 	struct addrinfo proxyhints, int socksv, const char *proxyuser, char *headers)
 {
 	int s;
@@ -1061,12 +1102,9 @@
 	if (is_proxy)
 		proxy_proto = proxy_read_connection_request(request_sock, (char**)&endpoint2host, (char**)&endpoint2port);
 
-	if (xflag)
-		s = socks_connect(endpoint2host, endpoint2port, hints,
-		    proxyhost, proxyport, proxyhints, socksv,
-		    proxyuser, headers);
-	else
-		s = remote_connect(endpoint2host, endpoint2port, hints);
+	s = recursive_connect(endpoint2host, endpoint2port, hints,
+	    proxyhost, proxyport, proxyhints, socksv,
+	    proxyuser, headers);
 
 	if (s < 0) {
 		if (is_proxy)
--- a/socks.c
+++ b/socks.c
@@ -41,8 +41,6 @@
 #include <bsd/readpassphrase.h>
 #include "atomicio.h"
 
-#define SOCKS_PORT	"1080"
-#define HTTP_PROXY_PORT	"3128"
 #define HTTP_MAXHDRS	64
 #define SOCKS_V5	5
 #define SOCKS_V4	4
@@ -54,8 +52,8 @@
 #define SOCKS_IPV6	4
 
 int	remote_connect(const char *, const char *, struct addrinfo);
-int	socks_connect(const char *, const char *, struct addrinfo,
-	    const char *, const char *, struct addrinfo, int,
+int	recursive_connect(const char *, const char *, struct addrinfo,
+	    const char *[], const char *[], struct addrinfo, int,
 	    const char *, char*);
 int	proxy_read_connection_request(int request_sock, char **host, char **port);
 void	proxy_send_error_reply(int request_sock, int proxy_proto);
@@ -147,9 +145,9 @@
 }
 
 int
-socks_connect(const char *host, const char *port,
+recursive_connect(const char *host, const char *port,
     struct addrinfo hints __attribute__ ((__unused__)),
-    const char *proxyhost, const char *proxyport, struct addrinfo proxyhints,
+    const char *proxyhost[], const char *proxyport[], struct addrinfo proxyhints,
     int socksv, const char *proxyuser, char* headers)
 {
 	int proxyfd, r, authretry = 0;
@@ -162,8 +160,9 @@
 	in_port_t serverport;
 	const char *proxypass = NULL;
 
-	if (proxyport == NULL)
-		proxyport = (socksv == -1) ? HTTP_PROXY_PORT : SOCKS_PORT;
+	if (proxyhost == NULL || proxyhost[0] == NULL || proxyhost[0][0] == 0)
+		return remote_connect(host, port, hints);
+
 
 	/* Abuse API to lookup port */
 	if (decode_addrport("0.0.0.0", port, (struct sockaddr *)&addr,
@@ -175,7 +174,7 @@
 	if (authretry++ > 3)
 		errx(1, "Too many authentication failures");
 
-	proxyfd = remote_connect(proxyhost, proxyport, proxyhints);
+	proxyfd = recursive_connect(proxyhost[0], proxyport[0], hints, proxyhost+1, proxyport+1, proxyhints, socksv, proxyuser, headers);
 
 	if (proxyfd < 0)
 		return (-1);
@@ -320,7 +319,7 @@
 		if (authretry > 1) {
 			char resp[1024];
 
-			proxypass = getproxypass(proxyuser, proxyhost);
+			proxypass = getproxypass(proxyuser, proxyhost[0]);
 			r = snprintf((char*)buf, sizeof(buf), "%s:%s",
 			    proxyuser, proxypass);
 			if (r == -1 || (size_t)r >= sizeof(buf) ||
--- a/nc.1
+++ b/nc.1
@@ -300,21 +300,25 @@
 (HTTPS proxy).
 If the protocol is not specified, SOCKS version 5 is used.
 .It Xo
-.Fl x Ar proxy_address Ns Oo : Ns
-.Ar port Oc
+.Fl x Ar proxy1 Ns Oo : Ns
+.Ar port1 Oc Ns Oo + Ns Ar proxy2 Ns Oo : Ns Ar port2 Ns Oc Ns ... Oc
 .Xc
 Requests that
 .Nm
 should connect to
 .Ar destination
-using a proxy at
-.Ar proxy_address
-and
-.Ar port .
+using a proxy chain.
+.Nm
+will use the 1st proxy to connect to the 2nd proxy, the 2nd proxy to connect
+to the 3rd and so on. The last proxy in the chain will be used to connect to
+the destination.
 If
-.Ar port
+.Ar port*
 is not specified, the well-known port for the proxy protocol is used (1080
-for SOCKS, 3128 for HTTPS).
+for SOCKS, 3128 for HTTPS). All proxies must speak the same protocol as
+specified with the
+.Fl X
+option.
 .It Fl Z
 DCCP mode.
 .It Fl z
